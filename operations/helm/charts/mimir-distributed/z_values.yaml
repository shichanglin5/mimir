kubeVersionOverride: v1.27.4
fullnameOverride: mimir
image:
  repository: hub.17usoft.com/lhhdz/grafana/mimir
  tag: 2.11_pre
  pullPolicy: Always
global:
  dnsService: kube-dns
  dnsNamespace: kube-system
  clusterDomain: cluster.local.
  extraEnv: [ ]
  extraEnvFrom:
    - configMapRef:
        name: mimir-extra-env
serviceAccount:
  create: true
configStorageType: ConfigMap

runtimeConfig:
  ingester_limits:
    max_inflight_push_requests: 200000000
    max_series: 200000000
    max_tenants: 50
    max_ingestion_rate: 200000000
  distributor_limits:
    max_ingestion_rate: 200000000
    max_inflight_push_requests: 200000000
    max_inflight_push_requests_bytes: 10000000000
  overrides:
    anonymous:
      ingestion_rate: 3000000
      ingestion_burst_size: 6000000
      max_global_series_per_user: 200000000
      max_global_series_per_metric: 200000000
      out_of_order_time_window: 10m
      max_cache_freshness: 12m
    default:
      request_rate: 5000
      request_burst_size: 5000
      ingestion_rate: 2000000
      ingestion_burst_size: 2000000
      max_global_series_per_user: 15000000
      max_global_series_per_metric: 15000000
      out_of_order_time_window: 10m
      max_cache_freshness: 12m
    skyeye-tlb:
      request_rate: 10000
      request_burst_size: 14000
      ingestion_rate: 500000
      ingestion_burst_size: 800000
      max_global_series_per_user: 15000000
      max_global_series_per_metric: 15000000
      out_of_order_time_window: 10m
      max_cache_freshness: 20m
    skyeye-tlb-uat:
      request_rate: 1000
      request_burst_size: 1500
      ingestion_rate: 50000
      ingestion_burst_size: 500000
      max_global_series_per_user: 500000
      max_global_series_per_metric: 500000
      out_of_order_time_window: 10m
      max_cache_freshness: 12m
    skyeye-skynet:
      request_rate: 1000
      request_burst_size: 1500
      ingestion_rate: 90000
      ingestion_burst_size: 100000
      max_global_series_per_user: 400000
      max_global_series_per_metric: 400000
      out_of_order_time_window: 10m
      max_cache_freshness: 12m
    skyeye-apm:
      request_rate: 60000
      request_burst_size: 70000
      ingestion_rate: 3000000
      ingestion_burst_size: 4000000
      max_global_series_per_user: 120000000
      max_global_series_per_metric: 120000000
      out_of_order_time_window: 10m
      max_cache_freshness: 12m
    skyeye-apm-uat:
      request_rate: 10000
      request_burst_size: 15000
      ingestion_rate: 500000
      ingestion_burst_size: 600000
      max_global_series_per_user: 3000000
      max_global_series_per_metric: 3000000
      out_of_order_time_window: 10m
      max_cache_freshness: 12m
    inf-redisproxy:
      request_rate: 500
      request_burst_size: 500
      ingestion_rate: 500000
      ingestion_burst_size: 600000
      max_global_series_per_user: 2000000
      max_global_series_per_metric: 2000000
      out_of_order_time_window: 10m
      max_cache_freshness: 12m
    inf-dbproxy:
      request_rate: 1000
      request_burst_size: 1500
      ingestion_rate: 1500000
      ingestion_burst_size: 1500000
      max_global_series_per_user: 20000000
      max_global_series_per_metric: 20000000
      out_of_order_time_window: 10m
      max_cache_freshness: 12m
    inf-esproxy:
      request_rate: 1000
      request_burst_size: 1500
      ingestion_rate: 3000000
      ingestion_burst_size: 3000000
      max_global_series_per_user: 15000000
      max_global_series_per_metric: 15000000
      out_of_order_time_window: 10m
      max_cache_freshness: 12m
    inf-es:
      request_rate: 1
      ingestion_rate: 1
      ingestion_burst_size: 1
      max_global_series_per_user: 1
      max_global_series_per_metric: 1
      out_of_order_time_window: 10m
      max_cache_freshness: 12m
    skyeye-gateway:
      request_rate: 5000
      request_burst_size: 5000
      ingestion_rate: 400000
      ingestion_burst_size: 400000
      max_global_series_per_user: 1800000
      max_global_series_per_metric: 1800000
      out_of_order_time_window: 10m
      max_cache_freshness: 12m
    skyeye-alert:
      request_rate: 100
      request_burst_size: 200
      ingestion_rate: 500
      ingestion_burst_size: 100
      max_global_series_per_user: 10000
      max_global_series_per_metric: 10000
      out_of_order_time_window: 10m
      max_cache_freshness: 12m

distributor:
  replicas: 8
  topologySpreadConstraints:
    maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: ScheduleAnyway
  terminationGracePeriodSeconds: 60
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 15%
  securityContext:
    fsGroup: ~
    runAsGroup: ~
    runAsNonRoot: ~
    runAsUser: 0
    seccompProfile: ~
  podSecurityContext: ~
  containerSecurityContext: ~
  resources:
    limits:
      memory: ~
    requests:
      cpu: ~
      memory: ~

ingester:
  replicas: 8
  statefulSet:
    enabled: true
  persistentVolume:
    enabled: true
    storageClass: "mimir-ingester"
    size: 800Gi
    accessModes:
      - ReadWriteOnce
    enableRetentionPolicy: true
    whenScaled: Retain
    whenDeleted: Retain
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
      scheme: HTTP
    initialDelaySeconds: 60
    timeoutSeconds: 3
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  topologySpreadConstraints:
    maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: ScheduleAnyway
  zoneAwareReplication:
    enabled: false
  securityContext:
    fsGroup: ~
    runAsGroup: ~
    runAsNonRoot: ~
    runAsUser: 0
    seccompProfile: ~
  podSecurityContext: ~
  containerSecurityContext: ~
  resources:
    limits:
      memory: ~
    requests:
      cpu: ~
      memory: ~

overrides_exporter:
  enabled: true
  replicas: 1
  securityContext:
    fsGroup: ~
    runAsGroup: ~
    runAsNonRoot: ~
    runAsUser: 0
    seccompProfile: ~
  podSecurityContext: ~
  containerSecurityContext: ~
  resources:
    limits:
      memory: ~
    requests:
      cpu: ~
      memory: ~

ruler:
  enabled: true
  replicas: 0
  securityContext:
    fsGroup: ~
    runAsGroup: ~
    runAsNonRoot: ~
    runAsUser: 0
    seccompProfile: ~
  podSecurityContext: ~
  containerSecurityContext: ~
  resources:
    limits:
      memory: ~
    requests:
      cpu: ~
      memory: ~

querier:
  replicas: 8
  topologySpreadConstraints:
    maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: ScheduleAnyway
  securityContext:
    fsGroup: ~
    runAsGroup: ~
    runAsNonRoot: ~
    runAsUser: 0
    seccompProfile: ~
  podSecurityContext: ~
  containerSecurityContext: ~
  resources:
    limits:
      memory: ~
    requests:
      cpu: ~
      memory: ~

query_frontend:
  replicas: 8
  securityContext:
    fsGroup: ~
    runAsGroup: ~
    runAsNonRoot: ~
    runAsUser: 0
    seccompProfile: ~
  podSecurityContext: ~
  containerSecurityContext: ~
  resources:
    limits:
      memory: ~
    requests:
      cpu: ~
      memory: ~

query_scheduler:
  enabled: true
  replicas: 2
  securityContext:
    fsGroup: ~
    runAsGroup: ~
    runAsNonRoot: ~
    runAsUser: 0
    seccompProfile: ~
  podSecurityContext: ~
  containerSecurityContext: ~
  resources:
    limits:
      memory: ~
    requests:
      cpu: ~
      memory: ~

store_gateway:
  replicas: 0
  podDisruptionBudget:
    maxUnavailable: 1
  persistentVolume:
    enabled: true
    storageClass: "mimir-store-gateway"
    size: 600Gi
    accessModes:
      - ReadWriteOnce
    enableRetentionPolicy: true
    whenScaled: Retain
    whenDeleted: Retain
  topologySpreadConstraints:
    maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: ScheduleAnyway
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 60
  strategy:
    type: RollingUpdate
  zoneAwareReplication:
    enabled: false
  securityContext:
    fsGroup: ~
    runAsGroup: ~
    runAsNonRoot: ~
    runAsUser: 0
    seccompProfile: ~
  podSecurityContext: ~
  containerSecurityContext: ~
  resources:
    limits:
      memory: ~
    requests:
      cpu: ~
      memory: ~

compactor:
  replicas: 0
  persistentVolume:
    enabled: true
    storageClass: "mimir-compactor"
    size: 300Gi
    accessModes:
      - ReadWriteOnce
    enableRetentionPolicy: true
    whenScaled: Retain
    whenDeleted: Retain
  securityContext:
    fsGroup: ~
    runAsGroup: ~
    runAsNonRoot: ~
    runAsUser: 0
    seccompProfile: ~
  podSecurityContext: ~
  containerSecurityContext: ~
  resources:
    limits:
      memory: ~
    requests:
      cpu: ~
      memory: ~

chunks-cache:
  enabled: true
  replicas: 1
  resources:
    requests:
      cpu: ~
      memory: ~

index-cache:
  enabled: true
  replicas: 1
  resources:
    requests:
      cpu: ~
      memory: ~

metadata-cache:
  enabled: true
  replicas: 1
  resources:
    requests:
      cpu: ~
      memory: ~

results-cache:
  enabled: true
  replicas: 1
  allocatedMemory: 1024
  resources:
    requests:
      cpu: ~
      memory: ~

metaMonitoring:
  dashboards:
    enabled: false
    annotations:
      k8s-sidecar-target-directory: /tmp/dashboards/Mimir Dashboards
    labels:
      grafana_dashboard: "1"
  serviceMonitor:
    enabled: true
    clusterLabel: ~
    interval: 5s
    scrapeTimeout: 3s
    scheme: http
  grafanaAgent:
    enabled: true
    imageRepo:
    #  configReloader:
    #    repo: quay.io
    #    image: prometheus-operator/prometheus-config-reloader
    #    tag: v0.47.0
    #  grafanaAgent:
    #    repo: docker.io
    #    image: grafana/agent
    #    tag: v0.29.0
    installOperator: true
    logs:
      enabled: false
    metrics:
      enabled: true
      remote:
        #url 自动生成 distributor /api/v1/push 地址
        headers:
          X-Scope-OrgID: mimir
      scrapeK8s:
        enabled: true
        kubeStateMetrics:
          namespace: kube-system
          labelSelectors:
            app.kubernetes.io/name: kube-state-metrics
      scrapeInterval: 15s
    securityContext:
      fsGroup: ~
      runAsGroup: ~
      runAsNonRoot: ~
      runAsUser: 0
      seccompProfile: ~
    podSecurityContext: ~
    containerSecurityContext: ~

# -- Grafana Agent Operator 覆盖默认配置
# 在一些 k8s 集群配置，可能会禁用一些默认的配置，比如 PodSecurityPolicy，这里可以覆盖默认配置
# 导致 runtime/cgo: pthread_create failed: Operation not permitted
grafana-agent-operator:
  containerSecurityContext: ~
  podSecurityContext: ~

# disabled
enterprise:
  enabled: false
admin-cache:
  enabled: false
alertmanager:
  enabled: false
minio:
  enabled: false
nginx:
  enabled: false